在性能测试过程中，有时候可能会有java应用CPU占用过高的情况，这时候就需要对CPU进行监控分析，以帮助开发人员进行性能调优。有以下两种方法可以对性能进行监控分析。
java应用在运行的过程中可能会产生好多个线程，每个线程各自执行相应的java代码。在CPU占用过高的时候，我只要知道哪个线程在运行，就能知道哪部分代码的执行占用CPU过高。
第一步：查看java进程号和占用资源过多的线程号
查看java进程号：
ps -ef | grep java
查看占用资源过多的线程号
top -H
第二步：获取thread dump日志
jstack -l <pid>
取上面耗费CPU最高的第一行的PID 2094，将其转化为十六进制得到0x82e。然后在thread dump日志中搜索0x82e，将会搜到如下信息：
日志中的nid即是线程号。这样可以清晰的看到耗费CPU的源代码的具体位置，可以精确到行号。
这种方法我觉得不好。从堆栈信息中只能看出jdk以及netty的一些类的调用，并没有体现出应用代码的具体位置。
jprofiler监控
CPU Views—Hot Spots如下图
从上图可以看出是Ehcache的put占用了60%的CPU时间。这是因为我们的采集在接收到数据,执行messageReceived方法的时候要往Ehcache里面put。这样就导致了cpu占用过高。
